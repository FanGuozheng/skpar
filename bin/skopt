#!/usr/bin/env python3
import sys
if sys.hexversion < 0x03020000:
    sys.exit("SKOPT only works with python 3.2 or greater,"
             " as required by the underlying SKGEN")
import os
import argparse
from skopt.optimise import SKopt
import logging
import importlib
import skopt


def main():
    # argument parsing at start
    # -------------------------------------------------------------------
    parser = argparse.ArgumentParser(
            description="Tool for optimising Slater-Koster tables for DFTB."
            )
    parser.add_argument(
            "-np", "-npart", "-nind", dest="np", type=int, default=5, 
            action="store",
            help="Number of individuals(particles) in the population(swarm)."
            )
    parser.add_argument(
            "-ng", "-ngen", dest="ng", type=int, default=50, 
            action="store",
            help="Number of generations through which the population(swarm) evolves."
            )
    parser.add_argument(
            "-etol", dest="etol", type=float, default=1.0, 
            action="store", 
            help="Maximum tolerable error [%%], below which optimisation stops."
            )
    parser.add_argument(
            "skopt_input", type=str, default="skopt_in.py", action="store", 
            help="Input to skopt: description of systems, targets, weights, etc."
            )
    args = parser.parse_args()


    # Project work directory
    # -------------------------------------------------------------------
    workdir = os.getcwd()


    # Logging at console and to debug file
    # -------------------------------------------------------------------
    # Default logging is set so that skopt.debug.log gets all DEBUG
    # messages and above. At the same time console gets INFO and above.
    logging.basicConfig(level=logging.DEBUG,
            format='%(name)s %(levelname)-8s %(message)s',
            datefmt='%m-%d %H:%M',
            filename=os.path.join(workdir,'skopt.debug.log'),
            filemode='w')
    log=logging.getLogger("SKOPT")
    # define a Handler which writes INFO messages or higher to the sys.stderr
    console = logging.StreamHandler()
    console.setLevel(logging.INFO)
    # set a format which is simpler for console use
    formatter = logging.Formatter('%(name)s: %(levelname)-8s %(message)s')
    # tell the handler to use this format
    console.setFormatter(formatter)
    # add the handler to the root logger
    logging.getLogger('SKOPT').addHandler(console)


    # Import the definition of the systems
    # -------------------------------------------------------------------
    # the skoptdefs input is a python file; may be specified either as a
    # module name (something) or as a python file (something.py)
    # first we have to get rid of the .py, in order to use the import_module()
    # we must get rid of path too, if present, i.e. './blah.py' should become 'blah'
    argskoptinp = os.path.basename(args.skopt_input)
    fname, fext = os.path.splitext(argskoptinp)
    if fext=='.py':
        skoptinp_module = fname
    else:
        skoptinp_module = argskoptinp
    # now we should have a clean module name, w/o .py trailing
    try:
        log.info('Looking for input in {} python module'.format(skoptinp_module))
        skoptinp = importlib.import_module(skoptinp_module)
    except ImportError:
        log.critical('The specified skopt_input {0} module is missing.'.format(args.skopt_input))
        log.critical('Make sure it is in the current directory and is a valid python3 file.')
        sys.exit()

    skoptdefs = skoptinp.SKoptInput(workdir=workdir)

    systems    = skoptdefs.systems
    sysweights = skoptdefs.sysweights
    reportkeys = skoptdefs.reportkeys


    # Input parameter definition for the optimiser and for definitions 
    # for skgen:
    # skfdir is where skgen is run into: $workdir/$skfdir
    # skdefs_out naturally goes into the skfdir; the file is actually 
    # the input for skgen
    # skdefs_template stays in $workdir, as it is for the optimiser
    # -------------------------------------------------------------------
    skfdir = "skf"
    skdefs_out = "skdefs.py"
    skdefs_template = "skdefs.template.py"


    # Configure an instance of the optimiser
    # ----------------------------------------------------------------------
    # Parameters describing the optimisation strategy with PSO
    objectives = (-1,)  # Keep single objective optimisation for now;
                        # don't know how to handle multiobjective optimisation
    npart  = args.np         # Number of particles in the warm
    ngen   = args.ng         # Number of generations through which the swarm evolves
    ErrTol = args.etol/100.  # Use this as an alternative, if ngen is rather large,
                             # we stop as soon as the worst relative error accross
                             # the reference data falls below ErrTol.
    # instantiate an optimiser
    optimise = SKopt(workdir=workdir, skfdir=skfdir,
                     skdefs_template=skdefs_template, skdefs_out=skdefs_out,
                     # Systems definition
                     systems=systems, sysweights=sysweights, 
                     # Evaluator arguments
                     reportkeys=reportkeys,
                     # optimiser arguments as a list of kwargs
                     npart=npart, objectives=objectives,
                     ngen=ngen, ErrTol=ErrTol,
                     # log
                     log=log)
    # do the optimisation
    swarm, stats = optimise()


if __name__ == "__main__":
    main()
