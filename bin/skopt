#!/usr/bin/env python3
import sys
import os
import argparse
import logging
from skopt.core.input import parse_input
from skopt.core.evaluate import Evaluator, eval_objectives
from skopt.core.optimise import Optimiser
from skopt.core.query import Query


def main():
    # argument parsing at start
    # -------------------------------------------------------------------
    parser = argparse.ArgumentParser(
            description="Tool for optimising Slater-Koster tables for DFTB."
            )
    parser.add_argument(
            "skopt_input", type=str, default="skopt_in.yaml", action="store", 
            help="YAML input file: objectives, tasks, executables, optimisation options."
            )
    args = parser.parse_args()


    # Project work directory
    # -------------------------------------------------------------------
    workdir = os.getcwd()

    # Logging: console(INFO) and debug(DEBUG) file
    # Logging level may be controlled via command argument in the future
    # -------------------------------------------------------------------
    # Default logging is set so that skopt.debug.log gets all DEBUG
    # messages and above. At the same time console gets INFO and above.
    logging.basicConfig(level=logging.DEBUG,
            format='%(name)s %(levelname)-8s %(message)s',
            datefmt='%m-%d %H:%M',
            filename=os.path.join(workdir,'skopt.debug.log'),
            filemode='w')
    logger = logging.getLogger('skopt')
    # define a Handler which writes INFO messages or higher to the sys.stderr
    console = logging.StreamHandler()
    console.setLevel(logging.DEBUG)
    # set a format which is simpler for console use
    formatter = logging.Formatter('%(levelname)-8s %(message)s')
    # tell the handler to use this format
    console.setFormatter(formatter)
    # add the handler to the root logger
    logging.getLogger('skopt').addHandler(console)
    # question: do we have to do this mambo for all modules?
    # if we pass the logger, then we will not have %(name)s of the module,
    # but 'skopt' instead, and that will carry almost no info, i.e. redundant


    # Main part
    # -------------------------------------------------------------------
    # Do we really need to flush the modeldb?
    logger.info('Initialising ModelDataBase.')
    Query.flush_modelsdb()

    # parse input file
    filename = args.skopt_input
    logger.info('Parsing input file {}'.format(filename))
    tasks, objectives, optimisation = parse_input(filename)

    # instantiate the evaluator machinery
    logger.info('Instantiating Evaluator')
    evaluate   = Evaluator(objectives, tasks)

    # instantiate the optimiser
    if optimisation is not None:
        algo, options, parameters = optimisation
        logger.info('Instantiating optimiser')
        optimiser  = Optimiser(algo, parameters, evaluate, **options)

        # run the optimiser
        logger.info('Starting optimisation')
        optimiser()
        # issue final report
        optimiser.report()
        logger.info('Done.')
    else:
        fitness = evaluate(None)
        logger.debug("Individual objective fitness: {}".format(evaluate.objvfitness))
        logger.debug("Global fitness: {}".format(fitness))



if __name__ == "__main__":
    main()
