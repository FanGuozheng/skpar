executables:
    update: skdef.hsd, skf, skf/skdefs.template.py
    skgen: ./skf/skgen-opt.sh   # script yielding an skf set
    bands: dftbutils bands      # band-structure calculation
#                                 # see documentation for dftbutils sub-package
usermodules:
  - [skpar.dftbutils, [get_bs, get_Ek]]  # get_meff

tasks:
    # Three types of tasks exist:
    # - set: [parmeter_file, working_directory, optional_template_file(s)]
    # - run: [command, working_directory]
    # - get: [what, from_sourse(dir, file or dict), to_destination(dict), optional_kwargs]
    #        `what` is essentially a function name (see Get-Tasks dictionary)
    # ------------------------------------------------------------------------------
    - set: [[skf/skdefs.template.py]]   # update ./skf/skdefs.py
    # - set: [[skf/Li-Li.template.py]]   # update ./skf/skdefs.py
    - run: [./skf/skgen.sh]             # generate SKF-set
    - run: [./li/dftbutils.sh]          # run dftb+ and dp_bands in Si-diam
    - get_bs: ['.', Li.bs, {latticeinfo: {type: 'HEX', param: [3.06376567, 22.26617429]}}]
    # below we omit the destination, and results will update source dictionary
    # - get_meff: [Li.bs, {carriers: 'e', directions: ['Gamma-X'],
    #                      Erange: 0.005, usebandindex: True}]
    # - get_meff: [Li.bs, {carriers: 'h',
    #                      directions: ['Gamma-X', 'Gamma-L', 'Gamma-K'],
    #                      nb: 5, Erange: 0.0015}]
    # - get_meff: [Li.bs, {carriers: 'h',
    #                      directions: ['Gamma-X', 'Gamma-L', 'Gamma-K'],
    #                      nb: 3, Erange: 0.008}]
    # - get_meff: [Li.bs, {carriers: 'h',
    #                      directions: ['Gamma-X', 'Gamma-L', 'Gamma-K'],
    #                      nb: 1, Erange: 0.002, usebandindex: True}]
    # note the use of the 'align: 'Evb'', which is to align the Ek with
    # the 0 energy of the reference data
    - get_Ek: [Li.bs, {sympts: ['Gamma', 'A', 'H', 'K', 'L', 'M'],
                       # extract: {'vb': [12, 11, 10]},
                       extract: {'vb': [12, 10, 9]},
                       align: 'Evb'}]

objectives:

    # - Egap:                            # item to be queried from model database
    #     doc: Band-gap of Si (diamond)  # doc-string for report purposes (optional)
    #     models: Li.bs                  # model name must match destination of a get-tasks
    #     ref: 1.12                      # explicit reference data in for this objective
    #     weight: 4.0                    # relative importance of this objective
    #                                    # objective weight in the overall cost function
    #     eval: [rms, relerr]            # objective function: RMS of relative error

    # - effective_masses:                # items to be queried here will be defined by
    #     doc: Effective masses, Si      # explicit keys, since the reference data consists
    #     models: Li.bs                  # of key-value pairs
    #     ref:
    #         file: ./ref/meff-Si.dat    # the reference data is loaded via numpy.loadtxt()
    #         loader_args:
    #             dtype:                 # NOTABENE: yaml cannot read in tuples, so we must
    #                                    #           use the dictionary formulation of dtype
    #                 names: ['keys', 'values']
    #                 formats: ['S15', 'float']
    #     options:
    #         subweights:                # individual data items have sub-weight within an objective
    #             dflt   : 0.1           # changing the default (from 1.) to 0. allows us to consider
    #             me_GX_0: 1.0           # only select entries; alternatively, set select entries
    #             me_Xt_0: 0.0           # to zero effectively excludes them from consideration
    #     weight: 1.0                    # objective weight in the overall cost function
    #     eval: [rms, abserr]            # objective function: RMS of absolute error

    - special_Ek:
        doc: Eigenvalues at k-points of high symmetry
        models: Li.bs
        ref:
            file: ./ref/Ek_Li.dat
            loader_args:
                dtype:                 # NOTABENE: yaml cannot read in tuples, so we must
                                       #           use the dictionary formulation of dtype
                    names: ['keys', 'values']
                    formats: ['S15', 'float']
        options:
            subweights:
                dflt   : 0.1           # changing the default (from 1.) to 0. allows us to consider
                me_GX_0: 1.0           # only select entries; alternatively, set select entries
                mh_Xt_0: 0.0           # to zero effectively excludes them from consideration
        weight: 1.0
        eval: [rms, relerr]


optimisation:
    algo: PSO                          # algorithm: particle swarm optimisation
    options:
        npart: 2                       # number of particles
        ngen : 12                      # number of generations
    parameters:
        # - Li_Es:  -0.15 -0.05         # parameter names must match with placeholders in
        # - Li_Ep:  -0.05  0.0          # parameter names must match with placeholders in
        - Li_r_s:   4.0 7.0           # template files given to set-tasks above
        - Li_r_p:   5.0 8.0          # template files given to set-tasks above
        # - Li_power_sp: 2 10
