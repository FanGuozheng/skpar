.. index:: reference

.. _about:

========================================
Input File Reference
========================================

This reference covers the SKOPT input file -- sections of the reference
correspond to sections in the input file.

Tasks
======================================================================
SKOPT features dynamic model definition by the user, which greatly
enhances its flexibility. The model is defined by a sequence of tasks,
which represent the steps needed to obtaining model data. 
The tasks are declared in the input file and are executed in the given 
sequence at each iteration. 

There are three task categories:

    * **Set** -- model update -- updates the model environment with 
      the parameters generated by the optimiser at a given iteration;

    * **Run** -- model execution -- executes external programs, 
      scripts or commands, to perform the necessary model calculations;

    * **Get** -- collection of model data -- acquire the relevant data 
      from the various output files created during model execution.

Refer to :ref:`Fig. 2` for the corresponding steps in the optimisation
flow.

The signature of each category and a brief usage is shown below. 

For more complete examples see :ref:`tutorials`.

NOTABENE:

    Tasks should be entered as list items of the ``tasks:`` section in
    the input YAML file.

.. _`set_tasks`:

Set Tasks
--------------------------------------------------

.. code-block:: yaml

    tasks:
        - set: [parameter_file, work_directory, optional_templates]

Set-tasks serve to communicate the parameter values generated by the
optimiser to the model.

The parameters (including iteration number and possibly parameter names)
are written to ``parameter_file`` in ``work_directory``, for which standard 
rules apply: '~' is expanded to user directory, and if there is no 
path component included then it is relative to '.'.
Default parameter file is ``current.par``, and 
default work-directory is ``.`` if not explicitly specified.

The most important feature of the set task is its ability to update 
template files -- ``optional_templates``, according to the dictionary of 
parameters used in SKOPT.
The following rules apply in this respect:

    * ``optinonal_templates`` is a filename or a list of filenames with
      the following structure: ``template.something`` or 
      ``something.template.somthingelse``;
    * template files must contain named place-holders which are substituted
      for the corresponding parameter values;
    * upon substitution, the output files bear the name of the
      template, except for the ``template.`` part being removed --
      for example: `skdefs.template.py` becomes `skdefs.py`;
    * templates are expected to be in ``work_directory``, if they have
      no path component; else, standard path expansion applies;
    * place holders should be in the old string-formatting syntax for Python,
      i.e. ``%(parameter_name)parameter_type``; 
      NOTABENE: NO space after closing bracket!

.. _`run_tasks`:

Run Tasks
--------------------------------------------------

.. code-block:: yaml

    tasks:
        - run: [command, work_directory, input, output]

Run-tasks help to define model that must be optimised in a flexible
way, depending on the specific problem *without* modifying SKOPT.

The mandatory ``command`` argument is a string or list of strings and
may include options and arguments of an external executable, 
shell command, or a script.

The command is executed in ``work_directory``, for which standard 
rules apply: '~' is expanded to user directory, and if there is no 
path component included then it is relative to '.'.
Default work-directory is '.' if not explicitly specified.

The ``input`` and ``output`` files are optional and default to ``None``
and ``out.log`` in the working directory.

Run tasks support aliasing via the :ref:`executables` section.

.. _`get_tasks`:

Get Tasks
--------------------------------------------------

.. code-block:: yaml

    tasks:
        - get: [get_function, source, destination, func_arguments]

Get-tasks serve to collect model data from `source` and make it available
to the queries associated with each objective by writing the data in the
`destination` dictionary, which is part of the model database.
(see :ref:`Fig. 1` and :ref:`Fig. 2`).

The signature of get-tasks shown above relies on a dictionary of known 
functions, which are mostly model-specific.

The currently available `get-functions` accessible to the user via a 
get-task are as listed in `skopt/core/taskdict.py`_:

.. literalinclude:: ../../skopt/core/taskdict.py
    :linenos:
    :language: python
    :lines: 24-

.. _`skopt/core/taskdict.py`: ../../../skopt/core/taskdict.py

Beyond the mandatory ``get-function`` name, a get-task must have: 

    * ``source`` (mandatory, string) -- a directory name or a dictionary
      in the model database;
      
    * ``destination`` (optional, string) -- a dictionary in the model
      database; ``source`` is tried if destination is not given, and
      a dictionary is automatically allocated in the database when a
      destination is first used in a get-task;

    * ``func_arguments`` (optional, dict) -- a dictionary of key-value
      pairs, being keyword arguments of the get-function invoked.
      The possible arguments for each get-function can be checked
      via the table below, with links to the implementations underlying
      the available get-functions.

.. todo ::

    Add table with hyperlinks to the source of each functions, 
    revealing the doc-strings and possible kwargs.


Objectives
======================================================================

Types of objectives
--------------------------------------------------

Types of reference data
--------------------------------------------------

Queries
--------------------------------------------------

Weights and sub-weights
--------------------------------------------------


Optimisation
======================================================================


.. _`executables`:

Executables
======================================================================
